<?php
if (!defined('NETMATTER_BRIDGE_PLUGIN_ROOT')) { define('NETMATTER_BRIDGE_PLUGIN_ROOT', realpath(dirname(__FILE__))); class Netmatter_Bridge_Registry { private $data = array(); private static $instance = null; private function __construct() {} private static function getInstance() { if (self::$instance !== null) { return self::$instance; } self::$instance = new Netmatter_Bridge_Registry(); return self::$instance; } private function _set($key, $value) { $this->data[$key] = $value; } public static function set($key, $value) { self::getInstance()->_set($key, $value); } private function _get($key) { return isset($this->data[$key]) ? $this->data[$key] : null; } public static function get($key) { return self::getInstance()->_get($key); } private function clearAll() { $this->data = array(); } public static function reset() { self::getInstance()->clearAll(); } } class Netmatter_Bridge_Bridge { private $callbacks = array(); private $connector; private $queue; private $logger; private $host_version; private $integration_version; function __construct(Netmatter_Bridge_Connector $connector, Netmatter_Bridge_Queue $queue, Netmatter_Bridge_Logger_LoggerInterface $logger) { $this->connector = $connector; $this->queue = $queue; $this->logger = $logger; $this->connector->setRetries(0); } public function setCredentials($client_name, $source, $auth) { $this->connector->setClientName($client_name); $this->connector->setSource($source); $this->connector->setAuth($auth); } public function sendOrder(Netmatter_Bridge_DTO_Order $order) { $event = netmatter_bridge_factory_event()->create('order_created'); $event->addOrder($order->toArray()); $meta['version'] = array( 'plugin' => $this->getPluginVersion(), 'integration' => $this->getIntegrationVersion(), 'host' => $this->getHostVersion() ); $event->setMeta($meta, true); return $this->queue->send($event, $this->connector); } public function createOrder() { return netmatter_bridge_factory_dto()->create('order'); } public function registerCallback($event_code, $callback) { $this->callbacks[$event_code] = $callback; return $this; } public function getCallbacks() { return $this->callbacks; } function listen($data = null, array $server = null) { if ($data === null) { $data = file_get_contents('php://input'); } if ($server === null) { $server = $_SERVER; } $this->logger->log('Receiving data: ' . $data); $ret = $this->connector->parseRequest($data, $server); if ($ret->status !== 1) { $this->logger->log('Sending data: ' . $ret->body); foreach ($ret->headers AS $header) header($header); echo $ret->body; return; } $method = 'processEvent' . $ret->code; $output = (array)$this->{$method}($ret->event); $output['meta']['version']['plugin'] = $this->getPluginVersion(); $output['meta']['version']['integration'] = $this->getIntegrationVersion(); $output['meta']['version']['host'] = $this->getHostVersion(); $output = json_encode($output); $this->logger->log('Sending data: ' . $output); header('Content-Type: application/json'); echo $output; } public function processEventProductStockModified(Netmatter_Bridge_Event_ProductStockModified $event) { $errors = array(); foreach ($event->getProducts() AS $product) { $product_key = isset($product['sku']) ? $product['sku'] : $product['id']; ob_start(); try { $this->logger->log('Updating stock for product: ' . $product_key . '. New stock: ' . $product['stock']); $callback_errors = call_user_func($this->callbacks['product_stock_modified'], $product); if ($callback_errors) { $errors[$product_key] = $callback_errors; $this->logger->log('Errors: ' . print_r($callback_errors, true)); } } catch (Exception $e) { $this->logger->log($e); $errors[$product_key] = array('general' => 'Exception: ' . $e->getMessage()); } $unexpected_output = ob_get_clean(); if ($unexpected_output !== '') { $errors[$product_key]['unexpected_output'] = $unexpected_output; } } return array( 'response' => true, 'errors' => $errors ); } public function processEventProductModified(Netmatter_Bridge_Event_ProductModified $event) { $cart_product_ids = array(); $errors = array(); foreach ($event->getProducts() AS $product) { $cart_product_id = null; $product_key = isset($product['sourceId']) ? $product['sourceId'] : $product['identity']['sku']; ob_start(); if (isset($product['prices'])) { foreach ($product['prices'] AS $key => $price) { if (!is_array($price)) { $product['prices'][$key] = array("1" => $price); } } } try { $ret = call_user_func($this->callbacks['product_modified'], $product); if (is_array($ret)) $errors[$product_key] = $ret; else $cart_product_id = $ret; $cart_product_ids[$product_key] = $cart_product_id; if ($cart_product_id !== null) { $this->logger->log('Setting product: ' . $product_key . '. Internal id: ' . $cart_product_id); } } catch (Exception $e) { $this->logger->log($e); $errors[$product_key] = array('general' => 'Exception: ' . $e->getMessage()); } $unexpected_output = ob_get_clean(); if ($unexpected_output !== '') { $errors[$product_key]['unexpected_output'] = $unexpected_output; } } return array( 'response' => $cart_product_ids, 'errors' => $errors ); } public function processEventOrderStatusModified(Netmatter_Bridge_Event_OrderStatusModified $event) { $errors = array(); foreach ($event->getOrders() AS $order) { $order_key = $order['id']; ob_start(); try { $this->logger->log('Updating status for order: ' . $order_key . '. New status: ' . $order['statusId']); $callback_errors = call_user_func($this->callbacks['order_status_modified'], $order); if ($callback_errors) { $errors[$order_key] = $callback_errors; } } catch (Exception $e) { $this->logger->log($e); $errors[$order_key] = array('general' => 'Exception: ' . $e->getMessage()); } $unexpected_output = ob_get_clean(); if ($unexpected_output !== '') { $errors[$order_key]['unexpected_output'] = $unexpected_output; } } return array( 'response' => true, 'errors' => $errors ); } public function processEventConfigurationGet(Netmatter_Bridge_Event_ConfigurationGet $event) { $response = array(); $errors = array(); try { $this->logger->log('Reading configuration'); $response = call_user_func($this->callbacks['configuration_get']); } catch (Exception $e) { $this->logger->log($e); $errors = array('general' => 'Exception: ' . $e->getMessage()); } $unexpected_output = ob_get_clean(); if ($unexpected_output !== '') { $errors['unexpected_output'] = $unexpected_output; } return array( 'response' => $response, 'errors' => $errors ); } public function setHostVersion($host_version) { $this->host_version = $host_version; } public function getHostVersion() { return $this->host_version; } public function setIntegrationVersion($integration_version) { $this->integration_version = $integration_version; } public function getIntegrationVersion() { return $this->integration_version; } public function getPluginVersion() { return NETMATTER_BRIDGE_VERSION; } } class Netmatter_Bridge_Queue { private $queueDir; private $lockHandle; public function __construct($queue_directory) { $this->queueDir = realpath($queue_directory); } public function send(Netmatter_Bridge_Event_AbstractEvent $event, Netmatter_Bridge_Connector $connector) { $queued = (bool)$this->enqueue($event); $this->processQueue($connector); return $queued; } public function enqueue(Netmatter_Bridge_Event_AbstractEvent $event) { $json = json_encode($event->toArray()); list($usec, $sec) = explode(' ', microtime()); $filename = sprintf('%s.%s.json', $sec, substr($usec, 2)); $bytes = file_put_contents($this->queueDir . DIRECTORY_SEPARATOR . $filename, $json); return $bytes === strlen($json); } public function processQueue(Netmatter_Bridge_Connector $connector) { if (!$this->getLock()) { return false; } $sent = 0; while ($filename = $this->getNextFilename()) { $contents = file_get_contents($filename); $event = netmatter_bridge_factory_event()->createFromString($contents); $ret = $connector->sendEvent($event); if (!$ret || !$this->isHttpStatusSuccessful($ret->code)) { break; } $sent++; unlink($filename); } $this->releaseLock(); return $sent; } private function isHttpStatusSuccessful($status_code) { return $status_code >= 200 && $status_code < 300; } private function getLock() { $this->lockHandle = fopen($this->queueDir . '/transmit.lock', 'w'); return flock($this->lockHandle, LOCK_EX|LOCK_NB); } private function getNextFilename() { $queue = glob($this->queueDir . '/*.json'); return isset($queue[0]) ? $queue[0] : false; } private function releaseLock() { if ($this->lockHandle === null) { return; } flock($this->lockHandle, LOCK_UN); } public function getQueueDir() { return $this->queueDir; } public function __destruct() { $this->releaseLock(); } } class Netmatter_Bridge_Connector { private $clientName; private $source; private $auth; private $sslCert; private $retries; private $lastRetries; private $connection; private $logger; public function __construct(Netmatter_Bridge_Connection_ConnectionInterface $connection, Netmatter_Bridge_Logger_LoggerInterface $logger) { $this->connection = $connection; $this->logger = $logger; $this->retries = 0; } public function sendEvent(Netmatter_Bridge_Event_AbstractEvent $event) { $data = $event->toArray(); $data['guid'] = guidv4(); $data['auth'] = $this->getAuth(); $data['source'] = $this->getSource(); $data['clientName'] = $this->getClientName(); $post = json_encode($data); $this->connection->init(); $this->connection->addHeader('Content-Type: application/json'); if ($this->sslCert !== null) { $this->connection->setSSLCert($this->sslCert)->setSSLVerifyPeer(1); } $this->logger->log('Sending data to bridge: ' . $post); $this->lastRetries = 0; while (true) { $response = $this->connection->execute('', $post); $this->logger->log('Receiving from bridge: ' . json_encode($response)); if ($response && $response->code === 202) break; if ($this->lastRetries >= $this->retries) { $this->logger->log('Failed: Maximum retries reached. ' . $this->lastRetries . '. Data: ' . $post); break; } $this->lastRetries++; $this->logger->log('Retrying #' . $this->lastRetries . ': ' . $post); } return $response; } function parseRequest($json, array $server) { $ret = new StdClass(); if (!isset($server['SERVER_PROTOCOL'])) $server['SERVER_PROTOCOL'] = 'HTTP/1.1'; if (!isset($server['REQUEST_METHOD']) || $server['REQUEST_METHOD'] !== 'POST') { $ret->status = 0; $ret->headers = array( $server['SERVER_PROTOCOL'] . ' 405 Method Not Allowed', 'Allow: POST' ); $ret->body = 'Only post requests are allowed'; return $ret; } try { $event = netmatter_bridge_factory_event()->createFromString($json); } catch (Exception $e) { $this->logger->log($e); $ret->status = 0; $ret->headers = array( $server['SERVER_PROTOCOL'] . ' 400 Bad Request' ); $ret->body = json_encode(array('response' => false, 'errors' => array('general' => 'Malformed data given'))); return $ret; } if ($this->checkAuth($event->getAuth()) !== true) { $ret->status = 0; $ret->headers = array( $server['SERVER_PROTOCOL'] . ' 403 Forbidden' ); $ret->body = json_encode(array('response' => false, 'errors' => array('general' => 'Authentication token not valid'))); return $ret; } $ret->status = 1; $ret->event = $event; $ret->code = netmatter_bridge_camelcase($event->getResourceType(), '.') . netmatter_bridge_camelcase($event->getLifecycleEvent()); return $ret; } public function setCredentials($clientName, $source, $auth) { $this->clientName = $clientName; $this->source = $source; $this->auth = $auth; return $this; } function checkAuth($auth) { return $this->auth === $auth; } function getClientName() { return $this->clientName; } function setClientName($clientName) { $this->clientName = $clientName; return $this; } function getSource() { return $this->source; } function setSource($source) { $this->source = $source; return $this; } function getAuth() { return $this->auth; } function setAuth($auth) { $this->auth = $auth; return $this; } function getConnection() { return $this->connection; } function getLogger() { return $this->logger; } function setRetries($retries) { $this->retries = $retries; return $this; } function getRetries() { return $this->retries; } function setSSLCert($sslCert) { $this->sslCert = $sslCert; return $this; } function getSSLCert() { return $this->sslCert; } function getLastRetries() { return $this->lastRetries; } } abstract class Netmatter_Bridge_DTO_AbstractDTO { public function enforceUnicode($string) { if (function_exists('mb_detect_encoding') && mb_detect_encoding($string, array('UTF-8', 'UTF-7', 'ASCII'), true) === false) { $string = utf8_encode($string); } return $string; } abstract public function toArray(); } class Netmatter_Bridge_DTO_Customer extends Netmatter_Bridge_DTO_AbstractDTO { private $id; private $salutation; private $firstname; private $lastname; private $emailAddress; private $telephone; private $mobileTelephone; private $company; private $street; private $suburb; private $city; private $county; private $postcode; private $countryIsoCode; public function setId($id) { $this->id = $id; return $this; } public function getId() { return $this->id; } public function setSalutation($salutation) { $this->salutation = $this->enforceUnicode($salutation); return $this; } public function getSalutation() { return $this->salutation; } public function setFirstname($firstname) { $this->firstname = $this->enforceUnicode($firstname); return $this; } public function getFirstname() { return $this->firstname; } public function setLastname($lastname) { $this->lastname = $this->enforceUnicode($lastname); return $this; } public function geLastname() { return $this->firstname; } public function setEmailAddress($emailAddress) { $this->emailAddress = $this->enforceUnicode($emailAddress); return $this; } public function getEmailAddress() { return $this->emailAddress; } public function setTelephone($telephone) { $this->telephone = $this->enforceUnicode($telephone); return $this; } public function getTelephone() { return $this->telephone; } public function getMobileTelephone() { return $this->mobileTelephone; } public function setMobileTelephone($mobileTelephone) { $this->mobileTelephone = $this->enforceUnicode($mobileTelephone); return $this; } public function setCompany($company) { $this->company = $this->enforceUnicode($company); return $this; } public function getCompany() { return $this->company; } public function setStreet($street) { $this->street = $this->enforceUnicode($street); return $this; } public function getStreet() { return $this->street; } public function setSuburb($suburb) { $this->suburb = $this->enforceUnicode($suburb); return $this; } public function getSuburb() { return $this->suburb; } public function setCity($city) { $this->city = $this->enforceUnicode($city); return $this; } public function getCity() { return $this->city; } public function setCounty($county) { $this->county = $this->enforceUnicode($county); return $this; } public function getCounty() { return $this->county; } public function setPostcode($postcode) { $this->postcode = $this->enforceUnicode($postcode); return $this; } public function getPostcode() { return $this->postcode; } public function setCountryIsoCode($countryIsoCode) { $this->countryIsoCode = $this->enforceUnicode($countryIsoCode); return $this; } public function getCountryIsoCode() { return $this->countryIsoCode; } public function toArray() { return get_object_vars($this); } } class Netmatter_Bridge_DTO_LineItem extends Netmatter_Bridge_DTO_AbstractDTO { private $name; private $options = array(); private $productId; private $sku; private $quantity; private $rowNet; private $rowGross; private $rowTax; private $taxCode; public function setName($name) { $this->name = $this->enforceUnicode($name); return $this; } public function getName() { return $this->name; } public function addOption($key, $value) { $this->options[$key] = $this->enforceUnicode($value); } public function getOptions() { return $this->options; } public function setProductId($productId) { $this->productId = $this->enforceUnicode($productId); return $this; } public function getProductId() { return $this->productId; } public function setSku($sku) { $this->sku = $this->enforceUnicode($sku); return $this; } public function getSku() { return $this->sku; } public function setQuantity($quantity) { $this->quantity = $quantity; return $this; } public function getQuantity() { return $this->quantity; } public function setRowNet($rowNet) { $this->rowNet = $rowNet; return $this; } public function getRowNet() { return $this->rowNet; } public function setRowGross($rowGross) { $this->rowGross = $rowGross; return $this; } public function getRowGross() { return $this->rowGross; } public function setRowTax($rowTax) { $this->rowTax = $rowTax; return $this; } public function getRowTax() { return $this->rowTax; } public function setTaxCode($taxCode) { $this->taxCode = $this->enforceUnicode($taxCode); return $this; } public function getTaxCode() { return $this->taxCode; } public function toArray() { return get_object_vars($this); } } class Netmatter_Bridge_DTO_Address extends Netmatter_Bridge_DTO_AbstractDTO { private $firstname; private $lastname; private $company; private $street; private $suburb; private $city; private $county; private $postcode; private $countryIsoCode; private $telephone; private $mobileTelephone; private $emailAddress; public function setFirstname($firstname) { $this->firstname = $this->enforceUnicode($firstname); return $this; } public function getFirstname() { return $this->firstname; } public function setLastname($lastname) { $this->lastname = $this->enforceUnicode($lastname); return $this; } public function getLastname() { return $this->lastname; } public function setCompany($company) { $this->company = $this->enforceUnicode($company); return $this; } public function getCompany() { return $this->company; } public function setStreet($street) { $this->street = $this->enforceUnicode($street); return $this; } public function getStreet() { return $this->street; } public function setSuburb($suburb) { $this->suburb = $this->enforceUnicode($suburb); return $this; } public function getSuburb() { return $this->suburb; } public function setCity($city) { $this->city = $this->enforceUnicode($city); return $this; } public function getCity() { return $this->city; } public function setCounty($county) { $this->county = $this->enforceUnicode($county); return $this; } public function getCounty() { return $this->county; } public function setPostcode($postcode) { $this->postcode = $this->enforceUnicode($postcode); return $this; } public function getPostcode() { return $this->postcode; } public function setCountryIsoCode($countryIsoCode) { $this->countryIsoCode = $this->enforceUnicode($countryIsoCode); return $this; } public function getCountryIsoCode() { return $this->countryIsoCode; } public function setTelephone($telephone) { $this->telephone = $this->enforceUnicode($telephone); return $this; } public function getTelephone() { return $this->telephone; } public function setMobileTelephone($mobileTelephone) { $this->mobileTelephone = $this->enforceUnicode($mobileTelephone); return $this; } public function getMobileTelephone() { return $this->mobileTelephone; } public function setEmailAddress($emailAddress) { $this->emailAddress = $this->enforceUnicode($emailAddress); return $this; } public function getEmailAddress() { return $this->emailAddress; } public function toArray() { return get_object_vars($this); } } class Netmatter_Bridge_DTO_Shipping extends Netmatter_Bridge_DTO_AbstractDTO { private $method; private $methodLabel; private $net; private $gross; private $tax; private $taxCode; private $gift_message; public function setMethod($method) { $this->method = $this->enforceUnicode($method); return $this; } public function getMethod() { return $this->method; } public function setMethodLabel($methodLabel) { $this->methodLabel = $this->enforceUnicode($methodLabel); return $this; } public function getMethodLabel() { return $this->methodLabel; } public function setNet($net) { $this->net = $net; return $this; } public function getNet() { return $this->net; } public function setGross($gross) { $this->gross = $gross; return $this; } public function getGross() { return $this->gross; } public function setTax($tax) { $this->tax = $tax; return $this; } public function getTax() { return $this->tax; } public function setTaxCode($taxCode) { $this->taxCode = $this->enforceUnicode($taxCode); return $this; } public function getTaxCode() { return $this->taxCode; } public function setGiftMessage($message, $recipient = null, $sender = null) { $this->gift_message = array( 'message' => $message, 'recipient' => $recipient, 'sender' => $sender ); return $this; } public function getGiftMessage() { return $this->gift_message; } public function toArray() { return get_object_vars($this); } } class Netmatter_Bridge_DTO_Discount extends Netmatter_Bridge_DTO_AbstractDTO { private $label; private $taxCode; private $net; private $gross; private $tax; public function setLabel($label) { $this->label = $this->enforceUnicode($label); return $this; } public function getLabel() { return $this->label; } public function setTaxCode($taxCode) { $this->taxCode = $this->enforceUnicode($taxCode); return $this; } public function getTaxCode() { return $this->taxCode; } public function setNet($net) { $this->net = $net; return $this; } public function getNet() { return $this->net; } public function setGross($gross) { $this->gross = $gross; return $this; } public function getGross() { return $this->gross; } public function setTax($tax) { $this->tax = $tax; return $this; } public function getTax() { return $this->tax; } public function toArray() { return get_object_vars($this); } } class Netmatter_Bridge_DTO_Payment extends Netmatter_Bridge_DTO_AbstractDTO { private $method; private $currency; private $baseCurrency; private $amount; private $baseAmount; private $notes = array(); private $exceptions = array(); private $details; public function setMethod($method) { $this->method = $this->enforceUnicode($method); return $this; } public function getMethod() { return $this->method; } public function setCurrency($currency) { $this->currency = $this->enforceUnicode($currency); return $this; } public function getCurrency() { return $this->currency; } public function setBaseCurrency($baseCurrency) { $this->baseCurrency = $this->enforceUnicode($baseCurrency); return $this; } public function getBaseCurrency() { return $this->baseCurrency; } public function setAmount($amount) { $this->amount = $amount; return $this; } public function getAmount() { return $this->amount; } public function setBaseAmount($baseAmount) { $this->baseAmount = $baseAmount; return $this; } public function getBaseAmount() { return $this->baseAmount; } public function addNote($note) { $this->notes[] = $this->enforceUnicode($note); return $this; } public function getNotes() { return $this->notes; } public function addException($exception) { $this->exceptions[] = $this->enforceUnicode($exception); return $this; } public function getExceptions() { return $this->exceptions; } public function addSagepayDetails() { $this->details = new Netmatter_Bridge_DTO_PaymentDetails_Sagepay(); return $this->details; } public function addDefaultDetails() { $this->details = new Netmatter_Bridge_DTO_PaymentDetails_Default(); return $this->details; } public function addInfusionSoftDetails() { $this->details = new Netmatter_Bridge_DTO_PaymentDetails_InfusionSoft(); return $this->details; } public function addPaypalDetails() { $this->details = new Netmatter_Bridge_DTO_PaymentDetails_Paypal(); return $this->details; } public function addEpdqDetails() { $this->details = new Netmatter_Bridge_DTO_PaymentDetails_Epdq(); return $this->details; } public function addWorldPayDetails() { $this->details = new Netmatter_Bridge_DTO_PaymentDetails_WorldPay(); return $this->details; } public function toArray() { $data = get_object_vars($this); if ($this->details !== null) $data['details'] = $this->details->toArray(); return $data; } } abstract class Netmatter_Bridge_DTO_PaymentDetails_AbstractPaymentDetails extends Netmatter_Bridge_DTO_AbstractDTO { protected $txId; protected $status; protected $statusLabel; public function setTxId($txId) { $this->txId = $this->enforceUnicode($txId); return $this; } public function getTxId() { return $this->txId; } public function setStatus($status) { $this->status = $this->enforceUnicode($status); return $this; } public function getStatus() { return $this->status; } public function setStatusLabel($statusLabel) { $this->statusLabel = $this->enforceUnicode($statusLabel); return $this; } public function getStatusLabel() { return $this->statusLabel; } } class Netmatter_Bridge_DTO_PaymentDetails_Default extends Netmatter_Bridge_DTO_PaymentDetails_AbstractPaymentDetails { private $values = array(); public function setValue($key, $value) { $this->values[$key] = $this->enforceUnicode($value); return $this; } public function getValue($key) { if (!isset($this->values[$key])) { return null; } return $this->values[$key]; } public function toArray() { $ret = get_object_vars($this); unset($ret['values']); foreach ($this->values as $key => $value) { $ret[$key] = $value; } return $ret; } } class Netmatter_Bridge_DTO_PaymentDetails_Paypal extends Netmatter_Bridge_DTO_PaymentDetails_AbstractPaymentDetails { private $payerId; private $payerFirstname; private $payerLastname; private $payerEmailAddress; private $type; public function setPayerId($payerId) { $this->payerId = $this->enforceUnicode($payerId); return $this; } public function getPayerId() { return $this->payerId; } public function setPayerFirstname($payerFirstname) { $this->payerFirstname = $this->enforceUnicode($payerFirstname); return $this; } public function getPayerFirstname() { return $this->payerFirstname; } public function setPayerLastname($payerLastname) { $this->payerLastname = $this->enforceUnicode($payerLastname); return $this; } public function getPayerLastname() { return $this->payerLastname; } public function setPayerEmailAddress($payerEmailAddress) { $this->payerEmailAddress = $this->enforceUnicode($payerEmailAddress); return $this; } public function getPayerEmailAddress() { return $this->payerEmailAddress; } public function setType($type) { $this->type = $this->enforceUnicode($type); return $this; } public function getType() { return $this->type; } public function toArray() { return get_object_vars($this); } } class Netmatter_Bridge_DTO_PaymentDetails_Epdq extends Netmatter_Bridge_DTO_PaymentDetails_AbstractPaymentDetails { private $ccBrand; private $aavCheck; private $cvcCheck; public function setCcBrand($ccBrand) { $this->ccBrand = $this->enforceUnicode($ccBrand); return $this; } public function getCcBrand() { return $this->ccBrand; } public function setAavCheck($aavCheck) { $this->aavCheck = $this->enforceUnicode($aavCheck); return $this; } public function getAavCheck() { return $this->aavCheck; } public function setCvcCheck($cvcCheck) { $this->cvcCheck = $this->enforceUnicode($cvcCheck); return $this; } public function getCvcCheck() { return $this->cvcCheck; } public function toArray() { return get_object_vars($this); } } class Netmatter_Bridge_DTO_PaymentDetails_Sagepay extends Netmatter_Bridge_DTO_PaymentDetails_AbstractPaymentDetails { private $authCode; private $avsCv2Check; private $cv2Result; private $addressResult; private $postcodeResult; private $threeDSecureStatus; public function setAuthCode($authCode) { $this->authCode = $this->enforceUnicode($authCode); return $this; } public function getAuthCode() { return $this->authCode; } public function setAvsCv2Check($avsCv2Check) { $this->avsCv2Check = $this->enforceUnicode($avsCv2Check); return $this; } public function getAvsCv2Check() { return $this->avsCv2Check; } public function setCv2Result($cv2Result) { $this->cv2Result = $this->enforceUnicode($cv2Result); return $this; } public function getCv2Result() { return $this->cv2Result; } public function setAddressResult($addressResult) { $this->addressResult = $this->enforceUnicode($addressResult); return $this; } public function getAddressResult() { return $this->addressResult; } public function setPostcodeResult($postcodeResult) { $this->postcodeResult = $this->enforceUnicode($postcodeResult); return $this; } public function getPostcodeResult() { return $this->postcodeResult; } public function setThreeDSecureStatus($threeDSecureStatus) { $this->threeDSecureStatus = $this->enforceUnicode($threeDSecureStatus); return $this; } public function getThreedSecureStatus() { return $this->threeDSecureStatus; } public function toArray() { return get_object_vars($this); } } class Netmatter_Bridge_DTO_PaymentDetails_WorldPay extends Netmatter_Bridge_DTO_PaymentDetails_AbstractPaymentDetails { private $payerName; private $payerEmailAddress; private $message; private $transStatus; private $countryMatch; private $avs; private $rawAuthCode; private $authMode; public function setPayerName($payerName) { $this->payerName = $this->enforceUnicode($payerName); return $this; } public function getPayerName() { return $this->payerName; } public function setPayerEmailAddress($payerEmailAddress) { $this->payerEmailAddress = $this->enforceUnicode($payerEmailAddress); return $this; } public function getPayerEmailAddress() { return $this->payerEmailAddress; } public function setMessage($message) { $this->message = $this->enforceUnicode($message); return $this; } public function getMessage() { return $this->message; } public function setCountryMatch($countryMatch) { $this->countryMatch = $this->enforceUnicode($countryMatch); return $this; } public function getCountryMatch() { return $this->countryMatch; } public function setAvs($avs) { $this->avs = $this->enforceUnicode($avs); return $this; } public function getAvs() { return $this->avs; } public function setRawAuthCode($rawAuthCode) { $this->rawAuthCode = $this->enforceUnicode($rawAuthCode); return $this; } public function getRawAuthCode() { return $this->rawAuthCode; } public function setAuthmode($authMode) { $this->authMode = $this->enforceUnicode($authMode); return $this; } public function getAuthMode() { return $this->authMode; } public function toArray() { return get_object_vars($this); } } class Netmatter_Bridge_DTO_PaymentDetails_InfusionSoft extends Netmatter_Bridge_DTO_PaymentDetails_AbstractPaymentDetails { public function toArray() { return get_object_vars($this); } } class Netmatter_Bridge_DTO_Order extends Netmatter_Bridge_DTO_AbstractDTO { private $id; private $publicId; private $comment; private $channelId; private $lineItems = array(); private $customer; private $delivery; private $billing; private $shipping; private $discounts = array(); private $payment; private $leadSource; private $datePlaced; private $orderStatus; private $total; private $isPaid; public function setId($id) { $this->id = $id; return $this; } public function getId() { return $this->id; } public function setPublicId($publicId) { $this->publicId = $publicId; return $this; } public function getPublicId() { return $this->publicId; } function addLineItem() { $lineItem = new Netmatter_Bridge_DTO_LineItem(); $this->lineItems[] = $lineItem; return $lineItem; } public function getLineItems() { return $this->lineItems; } public function addCustomer() { $this->customer = new Netmatter_Bridge_DTO_Customer(); return $this->customer; } public function getCustomer() { return $this->customer; } public function addDelivery() { $this->delivery = new Netmatter_Bridge_DTO_Address(); return $this->delivery; } public function getDelivery() { return $this->delivery; } public function addBilling() { $this->billing = new Netmatter_Bridge_DTO_Address(); return $this->billing; } public function getBilling() { return $this->billing; } public function setComment($comment) { $this->comment = $this->enforceUnicode($comment); return $this; } public function getComment() { return $this->comment; } public function setChannelId($channelId) { $this->channelId = $this->enforceUnicode($channelId); return $this; } public function getChannelId() { return $this->channelId; } public function setOrderStatus($orderStatus) { $this->orderStatus = $this->enforceUnicode($orderStatus); return $this; } public function getOrderStatus() { return $this->orderStatus; } public function setLeadSource($leadSource) { $this->leadSource = $this->enforceUnicode($leadSource); return $this; } public function getLeadSource() { return $this->leadSource; } public function setDatePlaced($datePlaced) { $this->datePlaced = $datePlaced; return $this; } public function getDatePlaced() { return $this->datePlaced; } public function getTotal() { return $this->total; } public function setTotal($total) { $this->total = $total; return $this; } public function setIsPaid($isPaid) { $this->isPaid = $isPaid; return $this; } public function getIsPaid() { return $this->isPaid; } public function addShipping() { $this->shipping = new Netmatter_Bridge_DTO_Shipping(); return $this->shipping; } public function getShipping() { return $this->shipping; } public function addPayment() { $this->payment = new Netmatter_Bridge_DTO_Payment(); return $this->payment; } public function addDiscount() { $discount = new Netmatter_Bridge_DTO_Discount(); $this->discounts[] = $discount; return $discount; } public function getDiscounts() { return $this->discounts; } public function getPayment() { return $this->payment; } public function toArray() { $data = get_object_vars($this); if ($this->customer !== null) $data['customer'] = $this->customer->toArray(); if ($this->delivery !== null) $data['delivery'] = $this->delivery->toArray(); if ($this->billing !== null) $data['billing'] = $this->billing->toArray(); if ($this->shipping !== null) $data['shipping'] = $this->shipping->toArray(); if ($this->payment !== null) $data['payment'] = $this->payment->toArray(); $data['discounts'] = array(); foreach ($this->discounts AS $key => $discount) $data['discounts'][$key] = $discount->toArray(); $data['lineItems'] = array(); foreach ($this->lineItems AS $key => $lineItem) $data['lineItems'][$key] = $lineItem->toArray(); return $data; } } abstract class Netmatter_Bridge_Event_AbstractEvent { protected $auth; protected $idSet; protected $client_name; protected $source_name; protected $meta = array(); abstract public function parseObjects(array $objects); public function setAuth($auth) { $this->auth = $auth; } public function getAuth() { return $this->auth; } abstract public function getResourceType(); public function setIdSet($idSet) { $this->idSet = $idSet; } public function getIdSet() { return $this->idSet; } public function setMeta(array $meta, $append = false) { if ($append !== false) $this->meta = array_merge($meta, $this->meta); else $this->meta = $meta; } public function getMeta() { return $this->meta; } abstract public function getLifecycleEvent(); abstract public function getObjects(); public function toArray() { return array( 'auth' => $this->auth, 'resourceType' => $this->getResourceType(), 'idSet' => $this->idSet, 'lifecycleEvent' => $this->getLifecycleEvent(), 'objects' => $this->getObjects(), 'meta' => $this->getMeta() ); } public function toJson() { return json_encode($this->toArray()); } } class Netmatter_Bridge_Event_OrderCreated extends Netmatter_Bridge_Event_AbstractEvent { private $orders = array(); public function getResourceType() { return 'order'; } public function getLifecycleEvent() { return 'created'; } public function addOrder(array $data) { $errors = $this->checkOrder($data); if ($errors) return $errors; $this->orders[] = $data; $this->syncIdSet(); } public function checkOrder(array $data) { return array(); } private function syncIdSet() { $ids = array(); foreach ($this->orders AS $order) $ids[] = $order['id']; $this->setIdSet(implode(',', $ids)); } public function parseObjects(array $objects) { if (!isset($objects['orders'])) throw new Exception('Orders key not present'); $orders = array(); foreach ($objects['orders'] AS $key => $order) { $errors = $this->checkOrder($order); if ($errors) return $errors; $orders[] = $order; } $this->orders = $orders; } public function getOrders() { return $this->orders; } public function getObjects() { return array( 'orders' => $this->orders ); } } class Netmatter_Bridge_Event_OrderStatusModified extends Netmatter_Bridge_Event_AbstractEvent { private $orders = array(); public function getResourceType() { return 'order.status'; } public function getLifecycleEvent() { return 'modified'; } public function parseObjects(array $objects) { if (!isset($objects['orders'])) throw new Exception('Orders key not present'); $orders = array(); foreach ($objects['orders'] AS $key => $order) { if (!isset($order['id'])) throw new Exception('Order id not set'); if (!isset($order['statusId'])) throw new Exception('Order statusId not set'); $orders[] = $order; } $this->orders = $orders; } public function getOrders() { return $this->orders; } public function getObjects() { return array( 'order' => $this->orders ); } } class Netmatter_Bridge_Event_ProductCreated extends Netmatter_Bridge_Event_AbstractEvent { private $products = array(); public function getResourceType() { return 'product'; } public function getLifecycleEvent() { return 'created'; } public function parseObjects(array $objects) { if (!isset($objects['products'])) throw new Exception('Products key not present'); $products = array(); foreach ($objects['products'] AS $key => $product) { $products[] = $product; } $this->products = $products; } public function getProducts() { return $this->products; } public function getObjects() { return array( 'products' => $this->products ); } } class Netmatter_Bridge_Event_ProductModified extends Netmatter_Bridge_Event_AbstractEvent { private $products = array(); public function getResourceType() { return 'product'; } public function getLifecycleEvent() { return 'modified'; } public function parseObjects(array $objects) { if (!isset($objects['products'])) throw new Exception('Products key not present'); $products = array(); foreach ($objects['products'] AS $key => $product) { if (!isset($product['identity'])) { throw new Exception('Missing products informations'); } $products[] = $product; } $this->products = $products; } public function getProducts() { return $this->products; } public function getObjects() { return array( 'products' => $this->products ); } } class Netmatter_Bridge_Event_ProductStockModified extends Netmatter_Bridge_Event_AbstractEvent { private $products = array(); public function getResourceType() { return 'product.stock'; } public function getLifecycleEvent() { return 'modified'; } public function parseObjects(array $objects) { if (!isset($objects['products'])) throw new Exception('Products key not present'); $products = array(); foreach ($objects['products'] AS $key => $product) { if (!isset($product['id']) && !isset($product['sku'])) throw new Exception('Product id or sku not set'); if (!isset($product['stock'])) throw new Exception('Product stock not set or invalid'); $products[] = $product; } $this->products = $products; } public function getProducts() { return $this->products; } public function getObjects() { return array( 'products' => $this->products ); } } class Netmatter_Bridge_Event_ConfigurationGet extends Netmatter_Bridge_Event_AbstractEvent { public function getResourceType() { return 'configuration'; } public function getLifecycleEvent() { return 'get'; } public function parseObjects(array $objects) { } public function getObjects() { return array(); } } class Netmatter_Bridge_Factory_DTO { public function create($key) { $key = netmatter_bridge_camelcase($key); $class_name = 'Netmatter_Bridge_DTO_' . $key; return new $class_name(); } } class Netmatter_Bridge_Factory_Event { public function create($key) { $key = netmatter_bridge_camelcase($key); $class_name = 'Netmatter_Bridge_Event_' . $key; return new $class_name(); } public function createFromString($string) { $data = json_decode($string, true); if ($data === null) { throw new Exception('Invalid json string given'); } if (!isset($data['resourceType']{0})) { throw new Exception('ResourceType not present'); } if (!isset($data['lifecycleEvent']{0})) { throw new Exception('LivecycleEvent not present'); } $key = str_replace('.', '_', $data['resourceType']) . '_' . $data['lifecycleEvent']; $event = $this->create($key); if (isset($data['auth']{0})) { $event->setAuth($data['auth']); } if (isset($data['idSet']{0})) { $event->setIdSet($data['idSet']); } if (isset($data['objects'])) { $event->parseObjects($data['objects']); } if (isset($data['meta'])) { $event->setMeta($data['meta']); } return $event; } } interface Netmatter_Bridge_Logger_LoggerInterface { public function log($text); } class Netmatter_Bridge_Logger_Array implements Netmatter_Bridge_Logger_LoggerInterface { private $logs = array(); public function log($text) { $this->logs[] = $text; } public function getLogs() { return $this->logs; } public function getLast() { $count = count($this->logs); return $count > 0 ? $this->logs[$count - 1] : null; } } class Netmatter_Bridge_Logger_File implements Netmatter_Bridge_Logger_LoggerInterface { private $file; public function __construct($file) { $this->file = $file; } public function log($text) { $handler = fopen($this->file, 'a+'); fwrite($handler, gmdate('d.m.Y H:i:s T', time()) . ' | ' . $text . PHP_EOL . PHP_EOL); fclose($handler); } } class Netmatter_Bridge_Logger_RotatingFiles implements Netmatter_Bridge_Logger_LoggerInterface { private $dir; private $chanceOfCleanup = 1000; private $numberOfOldLogs = 6; private $uniqueId; public function __construct($dir) { $this->dir = $dir; $this->file = $this->createLogName(); $this->uniqueId = uniqid(getmypid()); } private function createLogName($time = null) { if (!$time) { $time = time(); } return date('Y-m-d', $time) . '.log'; } public function log($text) { $handler = fopen($this->dir . '/' . $this->file, 'a+'); fwrite($handler, gmdate('Y-m-d\TH:i:s\Z') . ' @' . $this->uniqueId . ' ' . $text . PHP_EOL); fclose($handler); } public function clearOldLogs() { $first_log = $this->createLogName(strtotime($this->numberOfOldLogs . ' days ago')); foreach (glob($this->dir . '/????-??-??.log') as $filename) { if (basename($filename) < $first_log) { unlink($filename); } } } public function __destruct() { if (mt_rand(0, $this->chanceOfCleanup) === 0) { $this->clearOldLogs(); } } } class Netmatter_Bridge_Logger_Null implements Netmatter_Bridge_Logger_LoggerInterface { public function log($text) { } } class Netmatter_Bridge_Logger_Screen implements Netmatter_Bridge_Logger_LoggerInterface { public function log($text) { echo $text . PHP_EOL; } } interface Netmatter_Bridge_Connection_ConnectionInterface { public function init(); public function close(); public function addHeader($header); public function getHeaders(); public function setTimeout($timeout); public function setSSLCert($ssl_cert); public function getSSLCert(); public function setSSLVerifyPeer($ssl_verify_peer); public function getSSLVerifyPeer(); public function execute($query_string = null, $post_string = null); } class Netmatter_Bridge_Connection_Curl implements Netmatter_Bridge_Connection_ConnectionInterface { private $url; private $handler; private $headers = array(); private $options = array(); function __construct($url) { $this->url = $url; } function init() { $this->close(); $this->handler = curl_init($this->url); $this->options = array(); $this->headers = array(); $this->setOption(CURLOPT_RETURNTRANSFER, 1); $this->setOption(CURLOPT_CONNECTTIMEOUT, 3); $this->setOption(CURLOPT_HEADER, 1); $this->setOption(CURLOPT_TIMEOUT, 30); $this->setOption(CURLOPT_SSL_VERIFYHOST, 2); $this->setOption(CURLOPT_SSL_VERIFYPEER, 0); } function close() { if ($this->handler !== null) { curl_close($this->handler); $this->handler = null; } } public function getUrl() { return $this->url; } public function addHeader($header) { if (!in_array($header, $this->headers)) $this->headers[] = $header; return $this; } public function getHeaders() { return $this->headers; } public function setTimeout($timeout) { $this->setOption(CURLOPT_TIMEOUT, $timeout); } public function setSSLCert($ssl_cert) { $this->setOption(CURLOPT_SSLCERT, $ssl_cert); return $this; } public function getSSLCert() { return $this->getOption(CURLOPT_SSLCERT); } public function setSSLVerifyPeer($ssl_verify_peer) { $this->setOption(CURLOPT_SSL_VERIFYPEER, $ssl_verify_peer); return $this; } public function getSSLVerifyPeer() { return $this->getOption(CURLOPT_SSL_VERIFYPEER); } public function setOption($key, $value) { $this->options[$key] = $value; return $this; } public function getOption($key) { return isset($this->options[$key]) ? $this->options[$key] : null; } public function getOptions() { return $this->options; } function curlExec() { return curl_exec($this->handler); } function curlGetInfo($opt) { return curl_getinfo($this->handler, $opt); } function execute($query_string = null, $post_string = null) { if ($this->handler === null) $this->init(); if ($query_string !== null) { $this->setOption(CURLOPT_URL, $this->url . $query_string); } if ($post_string !== null) { $this->setOption(CURLOPT_POST, 1); $this->setOption(CURLOPT_POSTFIELDS, $post_string); } if (count($this->headers) > 0) { $this->setOption(CURLOPT_HTTPHEADER, $this->headers); } foreach ($this->options AS $key => $value) curl_setopt($this->handler, $key, $value); $response = $this->curlExec($this->handler); if ($response === false) { return (object)array('code' => 0, 'headers' => array(), 'body' => 'Error: ' . curl_error($this->handler) . '. No: ' . curl_errno($this->handler)); } $code = $this->curlGetInfo(CURLINFO_HTTP_CODE); $header_size = $this->curlGetInfo(CURLINFO_HEADER_SIZE); $header = substr($response, 0, $header_size); $headers = netmatter_bridge_parse_http_headers($header); $body = substr($response, $header_size); return (object)array('code' => $code, 'headers' => $headers, 'body' => $body); } function getHandler() { return $this->handler; } function __destruct() { $this->close(); } } function netmatter_bridge_connector() { $connector = Netmatter_Bridge_Registry::get('service::connector'); if ($connector !== null) { return $connector; } $connection = new Netmatter_Bridge_Connection_Curl(Netmatter_Bridge_Registry::get('config::bridge_callback')); $connector = new Netmatter_Bridge_Connector($connection, netmatter_bridge_logger()); $connector->setAuth(Netmatter_Bridge_Registry::get('config::auth')); $connector->setClientName(Netmatter_Bridge_Registry::get('config::client_name')); $connector->setSource(Netmatter_Bridge_Registry::get('config::source')); Netmatter_Bridge_Registry::set('service::connector', $connector); return $connector; } function netmatter_bridge_bridge() { $bridge = Netmatter_Bridge_Registry::get('service::bridge'); if ($bridge !== null) { return $bridge; } $bridge = new Netmatter_Bridge_Bridge(netmatter_bridge_connector(), netmatter_bridge_queue(), netmatter_bridge_logger()); Netmatter_Bridge_Registry::set('service::bridge', $bridge); return $bridge; } function netmatter_bridge_logger() { $logger = null; $log_type = Netmatter_Bridge_Registry::get('config::log_type'); switch ($log_type) { case 'file': $log_file = Netmatter_Bridge_Registry::get('config::log_file'); if (!isset($log_file{0})) throw new Exception('Netmatter bridge log_file not set or not writable'); $logger = new Netmatter_Bridge_Logger_File($log_file); break; case 'files': $log_dir = Netmatter_Bridge_Registry::get('config::log_dir'); if (!isset($log_dir)) { throw new Exception('Netmatter bridge log_dir not set'); } $logger = new Netmatter_Bridge_Logger_RotatingFiles($log_dir); break; case 'array': $logger = new Netmatter_Bridge_Logger_Array(); break; case 'screen': $logger = new Netmatter_Bridge_Logger_Screen(); break; default: $logger = new Netmatter_Bridge_Logger_Null(); } return $logger; } function netmatter_bridge_queue() { $queue = Netmatter_Bridge_Registry::get('service::queue'); if ($queue !== null) { return $queue; } $queue_directory = Netmatter_Bridge_Registry::get('config::queue_dir'); $queue = new Netmatter_Bridge_Queue($queue_directory); Netmatter_Bridge_Registry::set('service::queue', $queue); return $queue; } function netmatter_bridge_factory_event() { return new Netmatter_Bridge_Factory_Event(); } function netmatter_bridge_factory_dto() { return new Netmatter_Bridge_Factory_DTO(); } function netmatter_bridge_camelcase($string, $separator = null) { if ($separator === null) { $separator = '_'; } return str_replace(' ', '', ucwords(str_replace($separator, ' ', $string))); } function netmatter_bridge_parse_http_headers($header) { $headers = array(); $key = ''; foreach(explode("\n", $header) AS $i => $h) { $h = explode(':', $h, 2); if (isset($h[1])) { if (!isset($headers[$h[0]])) { $headers[$h[0]] = trim($h[1]); } elseif (is_array($headers[$h[0]])) { $headers[$h[0]] = array_merge($headers[$h[0]], array(trim($h[1]))); } else { $headers[$h[0]] = array_merge(array($headers[$h[0]]), array(trim($h[1]))); } $key = $h[0]; } else { if (substr($h[0], 0, 1) == "\t") { $headers[$key] .= "\r\n\t" . trim($h[0]); } elseif (!$key) { $headers[0] = trim($h[0]); } } } return $headers; } function guidv4() { if (function_exists('openssl_random_pseudo_bytes')) { $data = openssl_random_pseudo_bytes(16); $data[6] = chr(ord($data[6]) & 0x0f | 0x40); $data[8] = chr(ord($data[8]) & 0x3f | 0x80); return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4)); } else { return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x', mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0x0fff) | 0x4000, mt_rand(0, 0x3fff) | 0x8000, mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff) ); } } function netmatter_float_equals($float1, $float2) { if (function_exists('bccomp')) { return bccomp($float1, $float2, 10) === 0; } $epsilon = 0.0000000001; return abs($float1 - $float2) < $epsilon; } if (is_readable(NETMATTER_BRIDGE_PLUGIN_ROOT . '/config.php')) { require(NETMATTER_BRIDGE_PLUGIN_ROOT . '/config.php'); } if (isset($netmatter_bridge_config) && is_array($netmatter_bridge_config)) { foreach ($netmatter_bridge_config AS $key => $value) { Netmatter_Bridge_Registry::set('config::' . $key, $value); } } $bridge = netmatter_bridge_bridge(); define('NETMATTER_BRIDGE_VERSION', '1.2.2'); } $bridge = netmatter_bridge_bridge(); 